
include(${CMAKE_CURRENT_LIST_DIR}/cmake_settings.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/mann_settings.cmake)
include(${CMAKE_SOURCE_DIR}/deps.cmake)
include(${CMAKE_SOURCE_DIR}/project_layout.cmake)
include(${CMAKE_CURRENT_LIST_DIR}/mann_git_revision_description.cmake)

macro(_mann_generate_include_dirname name mkdirs result_full result_pref)
    set(${result_pref})
    set(INCDIR ${CMAKE_CURRENT_SOURCE_DIR}/${MANN_INCLUDE_DIR_NAME})
    foreach(cs ${MANN_BASE_NAMESPACE})
        if (mkdirs)
            file(MAKE_DIRECTORY ${INCDIR}/${cs})
        endif()
        set(INCDIR ${INCDIR}/${cs})
        if ("${result_pref}" STREQUAL "")
            set(${result_pref} ${cs})
        else()
            set(${result_pref} ${${result_pref}}/${cs})
        endif()
    endforeach()

    if (mkdirs)
        file(MAKE_DIRECTORY ${INCDIR}/${name})
    endif()

    set(${result_pref} ${${result_pref}}/${name})
    set(${result_full} ${INCDIR}/${name})
endmacro()

function(_mann_create_project_dir name)
    if (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${name})
        return()
    endif()

    if (NOT MANN_CREATE_MISSING_FILES)
        return()
    endif()

    file(MAKE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${name})
    file(MAKE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${name}/${MANN_INCLUDE_DIR_NAME})
    file(MAKE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${name}/${MANN_SOURCES_DIR_NAME})
    file(MAKE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${name}/${MANN_TESTS_DIR_NAME})

    set(INCDIR ${CMAKE_CURRENT_SOURCE_DIR}/${name}/${MANN_INCLUDE_DIR_NAME})
    foreach(cs ${MANN_BASE_NAMESPACE})
        file(MAKE_DIRECTORY ${INCDIR}/${cs})
        set(INCDIR ${INCDIR}/${cs})
    endforeach()

    file(MAKE_DIRECTORY ${INCDIR}/${name})
    _mann_generate_include_dirname(${name} TRUE dummy_full dummy_pref)

    file(WRITE ${CMAKE_CURRENT_SOURCE_DIR}/${name}/CMakeLists.txt "")
endfunction()

macro(_mann_generate_name result)
    set(start ${CMAKE_CURRENT_SOURCE_DIR})
    set(end ${CMAKE_SOURCE_DIR})

    while (NOT start STREQUAL end)
        get_filename_component(cname ${start} NAME)
        list(APPEND name_components ${cname})
        list(APPEND name_components -)
        get_filename_component(start ${start} DIRECTORY)
    endwhile()

    list(APPEND name_components ${PROJECT_NAME})
    list(REVERSE name_components)
    string(CONCAT tname ${name_components})
    string(TOLOWER ${tname} ${result})
endmacro()

macro(mann_recursive)
    foreach (name ${ARGN})
        message(STATUS "Adding subdirectory '${name}'")
        _mann_create_project_dir(${name})
        add_subdirectory(${name})
    endforeach()
endmacro()

macro(mann_start_component)
    set(flags)
    set(args NAME TYPE)
    set(margs)
    cmake_parse_arguments(_mann_sc "${flags}" "${args}" "${margs}" ${ARGN})
    set(_mann_current_target_name ${_mann_sc_NAME})
    set(_mann_current_target_type ${_mann_sc_TYPE})
    message(STATUS "New target '${_mann_current_target_name}' with type '${_mann_current_target_type}'")
    get_filename_component(lname ${CMAKE_CURRENT_SOURCE_DIR} NAME)
    _mann_generate_include_dirname(${lname} FALSE _mann_current_target_full_inlude_dir
                                                  _mann_current_target_include_prefx)
endmacro()

macro(mann_static_lib)
    set(flags)
    set(args NAME)
    set(margs)
    cmake_parse_arguments(_mann_sl "${flags}" "${args}" "${margs}" ${ARGN})
    if ("${_mann_sl_NAME}" STREQUAL "")
        _mann_generate_name(_mann_sl_NAME)
    endif()
    mann_start_component(NAME ${_mann_sl_NAME} TYPE "lib-static")
endmacro()

macro(mann_shared_lib)
    set(flags)
    set(args NAME)
    set(margs)
    cmake_parse_arguments(_mann_sl "${flags}" "${args}" "${margs}" ${ARGN})
    if (_mann_sl_NAME STREQUAL "")
        _mann_generate_name(_mann_sl_NAME)
    endif()
    mann_start_component(NAME ${_mann_sl_NAME} TYPE "lib-shared")
endmacro()

macro(mann_program)
    set(flags)
    set(args NAME)
    set(margs)
    cmake_parse_arguments(_mann_sl "${flags}" "${args}" "${margs}" ${ARGN})
    if ("${_mann_sl_NAME}" STREQUAL "")
        _mann_generate_name(_mann_sl_NAME)
    endif()
    mann_start_component(NAME ${_mann_sl_NAME} TYPE "exe")
endmacro()

macro(_mann_process_cudafile filename addsource)
    set_source_files_properties(${filename} PROPERTIES LANGUAGE CXX)
    set(${addsource} ${filename})
    if (NOT _mann_current_target_cuda_libs_added)
        list(APPEND _mann_current_target_links dl)
        list(APPEND _mann_current_target_links rt)
        list(APPEND _mann_current_target_links ${CUDA_cudart_static_LIBRARY})
        set(_mann_current_target_cuda_libs_added TRUE)
    endif()
endmacro()

macro(mann_includes)
    foreach(fn ${ARGN})
        set(full_fn ${_mann_current_target_full_inlude_dir}/${fn})
        if (MANN_CREATE_MISSING_FILES AND NOT EXISTS ${full_fn})
            file(WRITE ${full_fn} "#pragma once\n")
        endif()
        list(APPEND _mann_current_target_includes ${full_fn})
    endforeach()
endmacro()

macro(mann_configure_internal_header src dst)
    if (NOT IS_ABSOLUTE ${src})
        set(fullsrc ${CMAKE_CURRENT_SOURCE_DIR}/${MANN_SOURCES_DIR_NAME}/${src})
    else()
        set(fullsrc ${src})
    endif()
    list(APPEND _mann_current_target_private_includes ${CMAKE_CURRENT_BINARY_DIR})
    list(REMOVE_DUPLICATES _mann_current_target_private_includes)
    configure_file(${fullsrc} ${CMAKE_CURRENT_BINARY_DIR}/${dst} @ONLY)
    list(APPEND _mann_current_target_sources ${CMAKE_CURRENT_BINARY_DIR}/${dst})
endmacro()

macro(_mann_process_protofile filename addssrc)
    protobuf_generate_cpp(_src _hdr ${filename})
    set(${addssrc} ${_src} ${_hdr})
    list(APPEND _mann_current_target_private_includes ${CMAKE_CURRENT_BINARY_DIR})
    list(REMOVE_DUPLICATES _mann_current_target_private_includes)
    mann_link(PRIVATE protobuf::libprotobuf)
endmacro()

macro(mann_src)
    set(_mann_cpp_extensions .cpp;.cxx;.cc;.c)
    set(_mann_hpp_extensions .hpp;.h;)
    foreach(fn ${ARGN})
        if (IS_ABSOLUTE ${fn})
            set(full_fn ${fn})
        else()
            set(full_fn ${CMAKE_CURRENT_SOURCE_DIR}/${MANN_SOURCES_DIR_NAME}/${fn})
            if (MANN_CREATE_MISSING_FILES AND NOT EXISTS ${full_fn})
                file(WRITE ${full_fn} "")
            endif()
        endif()
        get_filename_component(fn_ext ${full_fn} EXT)
        if (fn_ext IN_LIST _mann_cpp_extensions)
            list(APPEND _mann_current_target_sources ${full_fn})
        elseif(fn_ext IN_LIST _mann_hpp_extensions)
            # do nothing
        elseif(fn_ext STREQUAL .proto)
            _mann_process_protofile(${full_fn} _mann_addsources)
            list(APPEND _mann_current_target_sources ${_mann_addsources})
        elseif(fn_ext STREQUAL .cu)
            _mann_process_cudafile(${full_fn} _mann_addsources)
            list(APPEND _mann_current_target_sources ${_mann_addsources})
        else()
            message(SEND_ERROR "Unsupported file type: '${fn}'")
        endif()
    endforeach()
endmacro()

macro(mann_link)
    set(margs PRIVATE PUBLIC)
    cmake_parse_arguments(_mann_l "" "" "${margs}" ${ARGN})
    foreach(lib IN LISTS _mann_l_PRIVATE)
        list(APPEND _mann_current_target_links ${lib})
    endforeach()
    foreach(lib IN LISTS _mann_l_PUBLIC)
        list(APPEND _mann_current_target_public_links ${lib})
    endforeach()
endmacro()

macro(mann_tests)
    foreach(fn ${ARGN})
        set(full_fn ${CMAKE_CURRENT_SOURCE_DIR}/${MANN_TESTS_DIR_NAME}/${fn})
        if (MANN_CREATE_MISSING_FILES AND NOT EXISTS ${full_fn})
            get_filename_component(_tests_name ${fn} NAME_WE)
            file(WRITE ${full_fn} "#include <gtest/gtest.h>\n\nTEST(${_tests_name}, empty) {}\n")
        endif()
        list(APPEND _mann_current_target_tests ${full_fn})
    endforeach()
endmacro()

macro(_mann_generate_target_flags tname istests)
    set(_ff)
    if (NOT ${istests})
        foreach(f IN LISTS _mann_current_target_sources _mann_current_target_includes)
            list(APPEND _ff "\"${f}\"")
        endforeach()
    else()
        foreach(f IN LISTS _mann_current_target_tests)
            list(APPEND _ff "\"${f}\"")
        endforeach()
    endif()
    string(REPLACE ";" "," _ff "${_ff}")
    file(GENERATE OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${tname}.flags
        CONTENT
"{
\"flags\": \"-I$<JOIN:$<TARGET_PROPERTY:${tname},INCLUDE_DIRECTORIES>, -I> \
-D$<JOIN:$<TARGET_PROPERTY:${tname},COMPILE_DEFINITIONS>, -D> -std=c++1z -x c++\",
\"files\": [${_ff}]
}
")
endmacro()

macro(mann_end)
    if ("${_mann_current_target_sources}" STREQUAL "")
        message(STATUS "Target '${_mann_current_target_name}' has only includes. Generate dummy cpp")
        set(dummy_src ${CMAKE_CURRENT_BINARY_DIR}/dummy.cpp)
        file(WRITE ${dummy_src} "")
        foreach(fn ${_mann_current_target_includes})
            file(APPEND ${dummy_src} "#include \"${fn}\"\n")
        endforeach()
        list(APPEND _mann_current_target_sources ${dummy_src})
    endif()

    if (_mann_current_target_type STREQUAL "lib-static")
        add_library(${_mann_current_target_name} STATIC ${_mann_current_target_sources})
    elseif(_mann_current_target_type STREQUAL "lib-shared")
        add_library(${_mann_current_target_name} SHARED ${_mann_current_target_sources})
    elseif(_mann_current_target_type STREQUAL "exe")
        add_executable(${_mann_current_target_name} ${_mann_current_target_sources})
    else()
        message(SEND_ERROR "Unknown target type '${_mann_current_target_type}'")
    endif()

    set(incdir ${CMAKE_CURRENT_SOURCE_DIR}/${MANN_INCLUDE_DIR_NAME})
    message(STATUS "target include dir: '${incdir}'")
    target_include_directories(${_mann_current_target_name} PUBLIC ${incdir})
    target_link_libraries(${_mann_current_target_name} PRIVATE ${_mann_current_target_links})
    target_link_libraries(${_mann_current_target_name} PUBLIC ${_mann_current_target_public_links})
    target_include_directories(${_mann_current_target_name} PRIVATE ${_mann_current_target_private_includes})

    _mann_generate_target_flags(${_mann_current_target_name} OFF)

    if (MANN_ENABLE_TESTS AND NOT "${_mann_current_target_tests}" STREQUAL "")
        add_executable(${_mann_current_target_name}-tests ${_mann_current_target_tests})
        target_link_libraries(${_mann_current_target_name}-tests
                                ${_mann_current_target_name}
                                GTest::GTest GTest::Main
        )
        gtest_add_tests(${_mann_current_target_name}-tests "" AUTO)
        _mann_generate_target_flags(${_mann_current_target_name}-tests ON)
    endif()
endmacro()

macro(mann_parse_version FULL_VERSION MAJOR MINOR BUILD HASH)
    string(REGEX MATCH "([0-9]+).([0-9]+)-([0-9]+)-(.*)" _res ${FULL_VERSION})
    set(${MAJOR} ${CMAKE_MATCH_1})
    set(${MINOR} ${CMAKE_MATCH_2})
    set(${BUILD} ${CMAKE_MATCH_3})
    set(${HASH} ${CMAKE_MATCH_4})
endmacro()
